{"version":3,"file":"static/js/74.db9b7247.chunk.js","mappings":"qSAEaA,E,QAAeC,GAAAA,IAAH,+F,SCmGzB,EA7FyB,WAAO,IAAD,IACnBC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAuBjB,OArBAC,EAAAA,EAAAA,YAAU,WACNH,GAAU,GAEV,IAAMI,EAAS,mCAAG,+GAEaC,MAAM,sCAAD,OACcb,EADd,6DAFlB,cAEJc,EAFI,gBAKSA,EAASC,OALlB,OAKJC,EALI,OAOVV,EAAgBU,GAPN,kDASVC,EAAAA,GAAAA,MAAY,wBATF,yBAWVT,GAAU,GAXA,6EAAH,qDAefI,GACH,GAAE,CAACZ,IAEAO,GAEI,0BACI,SAACW,EAAA,EAAD,OAMR,iCACI,mBACIC,KAAK,SACLC,QAAS,0BAAMX,EAAQ,oBAACP,EAASmB,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,IAAvC,EAFb,sBAOA,0BACKjB,EAAakB,MADlB,KAEKlB,EAAamB,aACRnB,EAAamB,aAAaC,UAAU,EAAG,GACvC,GAJV,QAQA,gBACIC,IACIrB,EAAasB,YAAb,yCACwCtB,EAAasB,aAC/C,mDAEVC,IAAKvB,EAAawB,kBAGtB,uCAEKxB,EAAayB,aACRC,KAAKC,MAAkC,GAA5B3B,EAAayB,cAAmBG,QAAQ,GACnD,GAJV,QAOA,sCACA,uBAAI5B,EAAa6B,YAEjB,oCACA,8BAAI7B,QAAJ,IAAIA,GAAJ,UAAIA,EAAc8B,cAAlB,iBAAI,EAAsBC,KAAI,SAAAC,GAAK,cAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAOC,IAAX,WAAnC,aAAI,EAAiDC,KAAK,QAC1D,UAACzC,EAAD,YACI,mDAEA,2BACI,yBACI,SAAC,KAAD,CAAM0C,GAAG,OAAT,qBAEJ,yBACI,SAAC,KAAD,CAAMA,GAAG,UAAT,8BAIZ,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAACxB,EAAA,EAAD,IAApB,UACI,SAAC,KAAD,QAIf,C,yCCnGD,SAASyB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CACIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CACe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GACzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CACAjB,OAAMkB,EACR,GACF,CACF,C","sources":["pages/MovieDetalisPage/MovieDetalisPage.styled.js","pages/MovieDetalisPage/MovieDetalisPage.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ShowInfoList = styled.div`\n    border-bottom: 3px outset grey;\n    border-top: 3px outset grey;\n`;\n","import { useState, useEffect, Suspense } from 'react';\nimport { useParams, Outlet, useLocation, useNavigate } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Loader from 'components/Loader';\nimport { ShowInfoList } from './MovieDetalisPage.styled';\n\nconst MovieDetailsPage = () => {\n    const { movieId } = useParams();\n    const location = useLocation();\n    const [movieDetails, setMovieDetails] = useState({});\n    const [loader, setLoader] = useState(false);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        setLoader(true);\n\n        const fetchData = async () => {\n            try {\n                const response = await fetch(\n                    `https://api.themoviedb.org/3/movie/${movieId}?api_key=58f452bc794f10dc7b9a5ba94d5a1bbe&language=en-US`\n                );\n                const data = await response.json();\n\n                setMovieDetails(data);\n            } catch (err) {\n                toast.error('Something went wrong');\n            } finally {\n                setLoader(false);\n            }\n        };\n\n        fetchData();\n    }, [movieId]);\n\n    if (loader) {\n        return (\n            <div>\n                <Loader />\n            </div>\n        );\n    }\n\n    return (\n        <>\n            <button\n                type=\"button\"\n                onClick={() => navigate(location.state?.from ?? '/')}\n            >\n                Go back\n            </button>\n\n            <h2>\n                {movieDetails.title} (\n                {movieDetails.release_date\n                    ? movieDetails.release_date.substring(0, 4)\n                    : ''}\n                )\n            </h2>\n\n            <img\n                src={\n                    movieDetails.poster_path\n                        ? `https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`\n                        : 'https://ltdfoto.ru/images/2023/02/08/image-1.png'\n                }\n                alt={movieDetails.original_title}\n            />\n\n            <p>\n                User Score:\n                {movieDetails.vote_average\n                    ? Math.round(movieDetails.vote_average * 10).toFixed(0)\n                    : ''}\n                %\n            </p>\n            <h3>Overview</h3>\n            <p>{movieDetails.overview}</p>\n\n            <h4>Genres</h4>\n            <p>{movieDetails?.genres?.map(genre => genre?.name)?.join(' ')}</p>\n            <ShowInfoList>\n                <p>Additional information</p>\n\n                <ul>\n                    <li>\n                        <Link to=\"cast\">Cast</Link>\n                    </li>\n                    <li>\n                        <Link to=\"reviews\">Reviews</Link>\n                    </li>\n                </ul>\n            </ShowInfoList>\n            <Suspense fallback={<Loader />}>\n                <Outlet />\n            </Suspense>\n        </>\n    );\n};\n\nexport default MovieDetailsPage;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["ShowInfoList","styled","movieId","useParams","location","useLocation","useState","movieDetails","setMovieDetails","loader","setLoader","navigate","useNavigate","useEffect","fetchData","fetch","response","json","data","toast","Loader","type","onClick","state","from","title","release_date","substring","src","poster_path","alt","original_title","vote_average","Math","round","toFixed","overview","genres","map","genre","name","join","to","Suspense","fallback","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}