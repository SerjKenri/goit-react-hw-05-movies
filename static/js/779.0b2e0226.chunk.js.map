{"version":3,"file":"static/js/779.0b2e0226.chunk.js","mappings":"8RAEaA,EAAUC,EAAAA,GAAAA,IAAH,gFAKPC,EAAcD,EAAAA,GAAAA,GAAH,yL,mBCyDxB,EAxDgB,WACZ,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA4BR,OA1BAE,EAAAA,EAAAA,YAAU,WACNH,GAAU,GAEV,IAAMI,EAAS,mCAAG,+GAEaC,MAAM,sCAAD,OACcJ,EADd,4EAFlB,YAEJK,EAFI,QAMGC,GANH,iCAOaD,EAASE,OAPtB,OAOAC,EAPA,OASNX,EAAWW,EAAKC,SATV,8BAWA,IAAIC,MAAM,wBAXV,0DAcVC,EAAAA,GAAAA,MAAA,uCAdU,yBAgBVZ,GAAU,GAhBA,6EAAH,qDAoBfI,GACH,GAAE,CAACH,IAEAF,GAEI,0BACI,SAACc,EAAA,EAAD,MAILhB,EAAQiB,QACX,SAACrB,EAAD,WACI,SAACE,EAAD,UACKE,EAAQkB,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACT,2BACI,wBAAKD,KAEL,uBAAIC,OAHCC,EAAAA,EAAAA,MADA,SAUrB,SAACzB,EAAD,WACI,kDAGX,C,uBC/DD,SAAS0B,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CACIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CACe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GACzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CACAjB,OAAMkB,EACR,GACF,CACF,C,uFC5BO,IAkBIvB,EAAS,eAACwB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.div`\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const ReviewsList = styled.ul`\n    margin-top: 0;\n    margin-bottom: 0;\n    padding: 40px;\n    list-style: none;\n    margin-left: auto;\n    margin-right: auto;\n    align-items: center;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport { toast } from 'react-toastify';\nimport { Section, ReviewsList } from './Reviews.styled';\nimport Loader from 'components/Loader';\n\nconst Reviews = () => {\n    const [reviews, setRewiews] = useState([]);\n    const [loader, setLoader] = useState(false);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        setLoader(true);\n\n        const fetchData = async () => {\n            try {\n                const response = await fetch(\n                    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=58f452bc794f10dc7b9a5ba94d5a1bbe&language=en-US&page=1`\n                );\n\n                if (response.ok) {\n                    const data = await response.json();\n\n                    setRewiews(data.results);\n                } else {\n                    throw new Error('Something went wrong');\n                }\n            } catch (error) {\n                toast.error(`Something went wrong, ${error}`);\n            } finally {\n                setLoader(false);\n            }\n        };\n\n        fetchData();\n    }, [movieId]);\n\n    if (loader)\n        return (\n            <div>\n                <Loader />\n            </div>\n        );\n\n    return reviews.length ? (\n        <Section>\n            <ReviewsList>\n                {reviews.map(({ author, content }) => (\n                    <li key={nanoid()}>\n                        <h4>{author}</h4>\n\n                        <p>{content}</p>\n                    </li>\n                ))}\n            </ReviewsList>\n        </Section>\n    ) : (\n        <Section>\n            <p>Reviews list is empty</p>\n        </Section>\n    );\n};\nexport default Reviews;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Section","styled","ReviewsList","useState","reviews","setRewiews","loader","setLoader","movieId","useParams","useEffect","fetchData","fetch","response","ok","json","data","results","Error","toast","Loader","length","map","author","content","nanoid","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}