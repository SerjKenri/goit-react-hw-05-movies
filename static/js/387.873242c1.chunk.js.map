{"version":3,"file":"static/js/387.873242c1.chunk.js","mappings":"sTAEaA,EAAUC,EAAAA,GAAAA,IAAH,gFAKPC,EAAWD,EAAAA,GAAAA,GAAH,sUAcRE,EAAWF,EAAAA,GAAAA,GAAH,mMAORG,EAAYH,EAAAA,GAAAA,IAAH,uT,SC0CtB,EA7Da,WACT,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA0BR,OAxBAE,EAAAA,EAAAA,YAAU,WACNH,GAAU,GAEV,IAAMI,EAAS,mCAAG,+GAEaC,MAAM,sCAAD,OACcJ,EADd,qEAFlB,YAEJK,EAFI,QAKGC,GALH,iCAMaD,EAASE,OANtB,OAMAC,EANA,OAONX,EAAQW,EAAKZ,MAPP,8BASA,IAAIa,MAAM,wBATV,0DAYVC,EAAAA,GAAAA,MAAA,uCAZU,yBAcVX,GAAU,GAdA,6EAAH,qDAkBfI,GACH,GAAE,CAACH,IAEAF,GACO,SAACa,EAAA,EAAD,IAGY,IAAhBf,EAAKgB,QACR,SAACtB,EAAD,WACI,SAACE,EAAD,UACKI,EAAKiB,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC1B,OACI,UAACvB,EAAD,YACI,SAACC,EAAD,CACIuB,IACID,EAAY,0DAC6CA,GACnD,+EAEVE,IAAKJ,KAET,uBAAIA,KACJ,uCAAeC,QAVJI,EAAAA,EAAAA,MAatB,SAIT,SAAC7B,EAAD,WACI,gEAGX,C,yCCpED,SAAS8B,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CACIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CACe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GACzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CACAjB,OAAMkB,EACR,GACF,CACF,C,uFC5BO,IAkBIvB,EAAS,eAACwB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.div`\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const CastList = styled.ul`\n    display: grid;\n    max-width: calc(100vw - 48px);\n    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n    grid-gap: 16px;\n    margin-top: 0;\n    margin-bottom: 0;\n    padding: 0;\n    list-style: none;\n    margin-left: auto;\n    margin-right: auto;\n    align-items: center;\n`;\n\nexport const CastItem = styled.li`\n    border-radius: 2px;\n    box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n        0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n        0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const CastImage = styled.img`\n    width: 100%;\n    height: 260px;\n    object-fit: cover;\n    transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover {\n        transform: scale(1.03);\n        cursor: zoom-in;\n    }\n    &:focus {\n        transform: scale(1.03);\n        cursor: zoom-in;\n    }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Loader from 'components/Loader';\nimport { Section, CastList, CastItem, CastImage } from './Cast.styled';\n\nconst Cast = () => {\n    const [cast, setCast] = useState([]);\n    const [loader, setLoader] = useState(false);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        setLoader(true);\n\n        const fetchData = async () => {\n            try {\n                const response = await fetch(\n                    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=58f452bc794f10dc7b9a5ba94d5a1bbe&language=en-US`\n                );\n                if (response.ok) {\n                    const data = await response.json();\n                    setCast(data.cast);\n                } else {\n                    throw new Error('Something went wrong');\n                }\n            } catch (error) {\n                toast.error(`Something went wrong, ${error}`);\n            } finally {\n                setLoader(false);\n            }\n        };\n\n        fetchData();\n    }, [movieId]);\n\n    if (loader) {\n        return <Loader />;\n    }\n\n    return cast.length !== 0 ? (\n        <Section>\n            <CastList>\n                {cast.map(({ name, character, profile_path }) => {\n                    return (\n                        <CastItem key={nanoid()}>\n                            <CastImage\n                                src={\n                                    profile_path\n                                        ? `https://image.tmdb.org/t/p/w300_and_h450_bestv2/${profile_path}`\n                                        : 'https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg'\n                                }\n                                alt={name}\n                            />\n                            <p>{name}</p>\n                            <p>Character: {character}</p>\n                        </CastItem>\n                    );\n                })}\n            </CastList>\n        </Section>\n    ) : (\n        <Section>\n            <p>Unfortunately, the cast is missing.</p>\n        </Section>\n    );\n};\n\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Section","styled","CastList","CastItem","CastImage","useState","cast","setCast","loader","setLoader","movieId","useParams","useEffect","fetchData","fetch","response","ok","json","data","Error","toast","Loader","length","map","name","character","profile_path","src","alt","nanoid","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}